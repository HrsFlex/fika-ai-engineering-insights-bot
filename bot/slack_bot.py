import sys
import os
import json
from datetime import datetime

# Path fix
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, parent_dir)

from slack_bolt import App
from slack_bolt.adapter.socket_mode import SocketModeHandler
from dotenv import load_dotenv
import matplotlib.pyplot as plt
import sqlite3

load_dotenv()

# Socket Mode App - No webhook URL needed!
app = App(
    token=os.environ.get("SLACK_BOT_TOKEN"),
    signing_secret=os.environ.get("SLACK_SIGNING_SECRET")
)

# Database setup
def init_db():
    conn = sqlite3.connect('fika.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS events 
                 (id TEXT PRIMARY KEY, type TEXT, actor TEXT, 
                  created_at TEXT, repo TEXT, data TEXT)''')
    conn.commit()
    conn.close()

# Mock data generator
def get_mock_data():
    return {
        'author_stats': {
            'alice': {'total_churn': 450, 'commits': 12, 'files_touched': 25, 'additions': 320, 'deletions': 130},
            'bob': {'total_churn': 280, 'commits': 8, 'files_touched': 15, 'additions': 200, 'deletions': 80},
            'charlie': {'total_churn': 620, 'commits': 15, 'files_touched': 35, 'additions': 480, 'deletions': 140}
        },
        'avg_churn': 350,
        'median_churn': 280,
        'total_commits': 35
    }

# Chart generator
def create_chart(churn_data):
    try:
        author_stats = churn_data.get('author_stats', {})
        
        if not author_stats:
            return None
        
        authors = list(author_stats.keys())
        churns = [stats['total_churn'] for stats in author_stats.values()]
        
        plt.figure(figsize=(10, 6))
        plt.bar(authors, churns, color=['#FF6B6B', '#4ECDC4', '#45B7D1'])
        plt.title('Code Churn by Author (Last Week)', fontsize=16)
        plt.xlabel('Authors', fontsize=12)
        plt.ylabel('Lines Changed', fontsize=12)
        plt.xticks(rotation=45)
        plt.tight_layout()
        
        chart_path = 'churn_chart.png'
        plt.savefig(chart_path, dpi=300, bbox_inches='tight')
        plt.close()
        
        return chart_path
        
    except Exception as e:
        print(f"Chart error: {e}")
        return None

# Report generator
def generate_report(churn_data):
    return f"""🚀 **Weekly Engineering Report** - {datetime.now().strftime('%B %d, %Y')}

## DORA Metrics Summary
• **Lead Time**: 24.5 hours
• **Deploy Frequency**: 3.2 per week  
• **Change Failure Rate**: 12.5%
• **MTTR**: 4.2 hours

## Code Churn Analysis
• **Total Commits**: {churn_data.get('total_commits', 0)}
• **Average Churn**: {churn_data.get('avg_churn', 0):.0f} lines per commit
• **Active Contributors**: {len(churn_data.get('author_stats', {}))}

## Top Contributors
**1. charlie**: 15 commits, 620 lines changed
**2. alice**: 12 commits, 450 lines changed  
**3. bob**: 8 commits, 280 lines changed

## Risk Assessment
✅ No unusual churn patterns detected

## Recommendations
• Team is performing well! Keep up the good work 🎉
• Consider code reviews for commits >500 lines
• Great deployment frequency - maintain the pace!

_Generated by FIKA AI Engineering Insights Bot_ 🤖
"""

# Slash command handler
@app.command("/dev-report")
def handle_dev_report(ack, say, command):
    ack()
    
    try:
        print(f"📊 Report requested by: {command['user_name']}")
        
        # Send loading message
        say("🔄 Generating your engineering report... Please wait!")
        
        # Get mock data
        churn_data = get_mock_data()
        
        # Generate report
        report = generate_report(churn_data)
        
        # Send report
        say(report)
        
        # Create and send chart
        chart_path = create_chart(churn_data)
        if chart_path and os.path.exists(chart_path):
            try:
                app.client.files_upload_v2(
                    channel=command['channel_id'],
                    file=chart_path,
                    title="📊 Code Churn Analysis Chart",
                    initial_comment="Here's your visual code churn analysis! 📈"
                )
                print("✅ Chart uploaded successfully")
            except Exception as e:
                print(f"❌ Chart upload failed: {e}")
                say("📊 Chart generation completed, but upload failed. Check logs.")
        
        print("✅ Report generated successfully")
                
    except Exception as e:
        print(f"❌ Error in command handler: {e}")
        say(f"❌ Sorry, something went wrong: {str(e)}")

# App mention handler
@app.event("app_mention")
def handle_mention(event, say):
    say(f"👋 Hello <@{event['user']}>! Use `/dev-report` to get your engineering insights!")

# Message handler for direct messages
@app.message("hello")
def handle_hello(message, say):
    say(f"Hello <@{message['user']}>! 🤖 I'm your FIKA AI Engineering Bot. Use `/dev-report` to get insights!")

# Error handler
@app.error
def custom_error_handler(error, body, logger):
    logger.exception(f"Error: {error}")
    logger.info(f"Request body: {body}")

if __name__ == "__main__":
    print("🚀 Starting FIKA AI Bot in Socket Mode...")
    init_db()
    print("✅ Database initialized")
    
    # Socket Mode Handler - No ngrok needed!
    handler = SocketModeHandler(app, os.environ.get("SLACK_APP_TOKEN"))
    
    print("🔌 Socket Mode enabled - connecting to Slack...")
    print("✅ Bot is ready! Use /dev-report in Slack")
    
    try:
        handler.start()
    except Exception as e:
        print(f"❌ Error starting bot: {e}")
        print("💡 Make sure your tokens are correct in .env file")
