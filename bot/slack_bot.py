import sys
import os
import json
from datetime import datetime

# Path fix
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, parent_dir)

from slack_bolt import App
from slack_bolt.adapter.socket_mode import SocketModeHandler
from dotenv import load_dotenv
from langgraph_workflow import run_workflow
from viz.charts import create_comprehensive_charts
from storage.db import init_db, save_workflow_log

load_dotenv()

# Socket Mode App
app = App(
    token=os.environ.get("SLACK_BOT_TOKEN"),
    signing_secret=os.environ.get("SLACK_SIGNING_SECRET")
)

@app.command("/dev-report")
def handle_dev_report(ack, say, command):
    ack()
    
    try:
        user_text = command.get('text', '').strip()
        repo = user_text if user_text else "microsoft/vscode"
        
        print(f"📊 Report requested by: {command['user_name']} for repo: {repo}")
        
        # Send loading message
        say("🔄 Running LangGraph workflow to generate your engineering report... Please wait!")
        
        # Run LangGraph workflow
        workflow_result = run_workflow(repo)
        
        # Extract results
        insights = workflow_result.get('insights', {})
        narrative = insights.get('narrative', 'No narrative generated')
        recommendations = insights.get('recommendations', [])
        dora_metrics = insights.get('dora_metrics', {})
        
        # Create comprehensive report
        full_report = f"""{narrative}

## Recommendations
"""
        for i, rec in enumerate(recommendations, 1):
            full_report += f"{i}. {rec}\n"
        
        full_report += f"""
## Workflow Summary
✅ Data Harvester: Collected {len(workflow_result.get('github_data', {}).get('commits', []))} commits
✅ Diff Analyst: Analyzed code patterns and risks  
✅ Insight Narrator: Generated DORA metrics and insights

_Generated by FIKA AI LangGraph Workflow_ 🤖
"""
        
        # Send main report
        say(full_report)
        
        # Create and send charts
        chart_paths = create_comprehensive_charts(workflow_result)
        
        for chart_path in chart_paths:
            if chart_path and os.path.exists(chart_path):
                try:
                    app.client.files_upload_v2(
                        channel=command['channel_id'],
                        file=chart_path,
                        title=f"📊 {chart_path.replace('.png', '').replace('_', ' ').title()}",
                        initial_comment=f"Visual analysis for {repo} 📈"
                    )
                except Exception as e:
                    print(f"Chart upload failed: {e}")
        
        # Log workflow execution
        save_workflow_log("complete_workflow", {"repo": repo}, workflow_result)
        
        print("✅ LangGraph workflow completed successfully")
                
    except Exception as e:
        print(f"❌ Error in workflow: {e}")
        say(f"❌ Sorry, workflow failed: {str(e)}")

@app.command("/workflow-status")
def handle_workflow_status(ack, say, command):
    ack()
    
    try:
        from storage.db import get_recent_metrics
        recent_metrics = get_recent_metrics(5)
        
        status_report = "📊 **Recent Workflow Executions**\n\n"
        
        if recent_metrics:
            for metric in recent_metrics:
                status_report += f"• {metric[1]} - {metric[2]}: {metric[3]}\n"
        else:
            status_report += "No recent workflow executions found."
        
        say(status_report)
        
    except Exception as e:
        say(f"❌ Error getting workflow status: {str(e)}")

@app.event("app_mention")
def handle_mention(event, say):
    say(f"👋 Hello <@{event['user']}>! Use `/dev-report [repo]` to get engineering insights!")

@app.error
def custom_error_handler(error, body, logger):
    logger.exception(f"Error: {error}")
    logger.info(f"Request body: {body}")

if __name__ == "__main__":
    print("🚀 Starting FIKA AI Bot with LangGraph Workflow...")
    init_db()
    print("✅ Database initialized")
    
    handler = SocketModeHandler(app, os.environ.get("SLACK_APP_TOKEN"))
    
    print("🔌 Socket Mode enabled - LangGraph agents ready")
    print("✅ Bot is ready! Use /dev-report [repo] in Slack")
    
    try:
        handler.start()
    except Exception as e:
        print(f"❌ Error starting bot: {e}")
